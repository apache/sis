/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.sis.internal.sql.reverse;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.UUID;
import java.util.logging.Logger;
import org.apache.sis.sql.dialect.SQLDialect;
import org.apache.sis.storage.DataStoreException;

/**
 * Description of a table column.
 *
 * @author Johann Sorel (Geomatys)
 * @version 1.0
 * @since   1.0
 * @module
 */
public class ColumnMetaModel {

    public enum Type {
        /**
         * Indicate this field value is generated by the database.
         */
        AUTO,
        /**
         * Indicate a sequence is used to generate field values.
         */
        SEQUENCED,
        /**
         * Indicate field value must be provided.
         */
        PROVIDED
    }

    private final String schema;
    private final String table;
    private final String name;
    private final int sqlType;
    private final String sqlTypeName;
    private final Class<?> clazz;
    private final Type type;
    private final String sequenceName;

    /**
     *
     * @param schema database scheme where this column is found
     * @param table database table where this column is found
     * @param name name of the column
     * @param sqlType column sql type
     * @param sqlTypeName column sql type name
     * @param clazz java type
     * @param type if column is a primary key, specify how the value is generated
     * @param sequenceName if column is a primary key, optional sequence name
     */
    public ColumnMetaModel(String schema, String table, String name,
            int sqlType, String sqlTypeName, Class<?> clazz, Type type, String sequenceName) {
        this.schema         = schema;
        this.table          = table;
        this.name           = name;
        this.sqlType        = sqlType;
        this.sqlTypeName    = sqlTypeName;
        this.clazz          = clazz;
        this.type           = type;
        this.sequenceName   = sequenceName;
    }

    public String getSchema() {
        return schema;
    }

    public String getTable() {
        return table;
    }

    public String getName() {
        return name;
    }

    public int getSqlType() {
        return sqlType;
    }

    public String getSqlTypeName() {
        return sqlTypeName;
    }

    public Class<?> getJavaType() {
        return clazz;
    }

    public Type getType() {
        return type;
    }

    public String getSequenceName() {
        return sequenceName;
    }

    /**
     * Try to compute next column value.
     *
     * @param dialect database dialect
     * @param logger database logger
     * @param cx database connection
     * @return next field value
     * @throws SQLException
     * @throws DataStoreException
     */
    public Object nextValue(final SQLDialect dialect, Logger logger, final Connection cx)
            throws SQLException, DataStoreException {
        Object next = null;

        if (type == Type.AUTO || type == Type.SEQUENCED) {
            //question the database for next value
            next = dialect.nextValue(this, cx);
        } else {
            //generate value if possible
            if (Number.class.isAssignableFrom(clazz)) {
                //Get the maximum value in the database and increment it
                final StringBuilder sql = new StringBuilder();
                sql.append("SELECT 1 + MAX(");
                dialect.encodeColumnName(sql, getName());
                sql.append(") FROM ");
                dialect.encodeSchemaAndTableName(sql, schema, table);

                try (Statement st = cx.createStatement();
                     ResultSet rs = st.executeQuery(sql.toString())) {
                    rs.next();
                    next = rs.getObject(1);
                }

                if (next == null) {
                    //can be the result of an empty table
                    next = 1;
                }

            } else if (CharSequence.class.isAssignableFrom(clazz)) {
                //use an UUID to reduce risk of conflicts
                next = UUID.randomUUID().toString();
            }

            if (next == null) {
                throw new DataStoreException("Failed to generate a value for column " + toString());
            }
        }

        return next;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder(name);
        sb.append('[');
        sb.append(sqlType);
        sb.append(',');
        sb.append(sqlTypeName);
        sb.append(',');
        sb.append(type);
        sb.append(']');
        return sb.toString();
    }
}
