/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.sis.internal.xml;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.HashMap;
import java.util.Map;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.Result;
import org.apache.sis.xml.Namespaces;


/**
 * Base class of Apache SIS writers of XML files using STAX writer.
 * This is a helper class for {@link org.apache.sis.storage.DataStore} implementations.
 * Writers for a given specification should extend this class and provide appropriate write methods.
 *
 * <p>Example:</p>
 * {@preformat java
 *     public class UserWriter extends StaxStreamWriter {
 *         public void write(User user) throws XMLStreamException {
 *             // Actual STAX write operations.
 *             writer.writeStartElement(â€¦);
 *         }
 *     }
 * }
 *
 * And should be used like below:
 *
 * {@preformat java
 *     try (UserWriter instance = new UserWriter()) {
 *         instance.setOutput(stream);
 *         instance.write(aUser);
 *     }
 * }
 *
 * <div class="section">Multi-threading</div>
 * This class and subclasses are not tread-safe. Synchronization shall be done by the {@code DataStore}
 * that contains the {@code StaxStream} instances.
 *
 * @author  Johann Sorel (Geomatys)
 * @since   0.8
 * @version 0.8
 * @module
 */
public abstract class StaxStreamWriter extends StaxStream {
    /**
     * The XML stream writer.
     */
    protected XMLStreamWriter writer;

    /**
     * Store the output stream if it was generated by the parser itself.
     * It will closed on the dispose method or when a new input is set.
     */
    private OutputStream targetStream;

    private int lastUnknowPrefix = 0;

    private final Map<String, String> unknowNamespaces = new HashMap<>();

    /**
     * Creates a new XML writer from the given file, URL, stream or reader object.
     * Set the output for this writer.<br>
     * Handle types are :<br>
     * - java.io.File<br>
     * - java.io.Writer<br>
     * - java.io.OutputStream<br>
     * - javax.xml.stream.XMLStreamWriter<br>
     * - javax.xml.transform.Result<br>
     *
     * @param output output object
     * @throws IOException if output is not supported or caused an error
     * @throws XMLStreamException if output is not a valid XML stream, or closing previous stream caused an error
     */
    protected StaxStreamWriter(Object output) throws IOException, XMLStreamException {
        if (output instanceof XMLStreamWriter) {
            writer = (XMLStreamWriter) output;
            return;
        }

        if (output instanceof File) {
            targetStream = new FileOutputStream((File)output);
            final BufferedOutputStream bout = new BufferedOutputStream(targetStream);
            output = bout;
        }
        if (output instanceof Path) {
            targetStream = Files.newOutputStream((Path) output, StandardOpenOption.CREATE, StandardOpenOption.WRITE);
            final BufferedOutputStream bout = new BufferedOutputStream(targetStream);
            output = bout;
        }

        writer = toWriter(output);
    }

    /**
     * Acces the underlying stax writer.
     * This method is used when several writer are wrapping a single writer.
     * Like when an Symbology Encoding writer wraps a Filter writer.
     * <br>
     * It can also be used to write tag before or after this writer is used.
     *
     * @return underlying stax writer, can be null if input has not been set
     */
    public XMLStreamWriter getWriter() {
        return writer;
    }

    /**
     * Write a new tag with the text corresponding to the given value.
     * The tag won't be written if the value is null.
     * @param namespace : namespace of the wanted tag
     * @param localName : local name of the wanted tag
     * @param value : text value to write
     * @throws XMLStreamException if underlying stax stream raised an error
     */
    protected void writeSimpleTag(final String namespace, final String localName, final Object value) throws XMLStreamException {
        if (value != null) {
            writer.writeStartElement(namespace, localName);
            writer.writeCharacters(value.toString());
            writer.writeEndElement();
        }
    }

    /**
     * Creates a new XMLStreamWriter.
     * @param output output object
     * @return XMLStreamWriter
     * @throws XMLStreamException if the output is not handled
     */
    private static XMLStreamWriter toWriter(final Object output) throws XMLStreamException {
        final XMLOutputFactory XMLfactory = XMLOutputFactory.newInstance();
        XMLfactory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);

        if (output instanceof OutputStream) {
            return XMLfactory.createXMLStreamWriter((OutputStream)output,"UTF-8");
        } else if(output instanceof Result) {
            return XMLfactory.createXMLStreamWriter((Result)output);
        } else if(output instanceof Writer) {
            return XMLfactory.createXMLStreamWriter((Writer)output);
        } else {
            throw new XMLStreamException("Output type is not supported : "+ output);
        }
    }

    /**
     * Returns the prefix for the given namespace.
     *
     * @param namespace The namespace for which we want the prefix.
     * @return namespace prefix
     */
    protected Prefix getPrefix(final String namespace) {
        String prefix = Namespaces.getPreferredPrefix(namespace, null);
        /*
         * temporary hack todo remove
         */
        if ("http://www.opengis.net/gml/3.2".equals(namespace)) {
            return new Prefix(false, "gml");
        }
        boolean unknow = false;
        if (prefix == null) {
            prefix = unknowNamespaces.get(namespace);
            if (prefix == null) {
                prefix = "ns" + lastUnknowPrefix;
                lastUnknowPrefix++;
                unknow = true;
                unknowNamespaces.put(namespace, prefix);
            }
        }
        return new Prefix(unknow, prefix);
    }

    /**
     * Inner class for handling prefix and if it is already known.
     */
    protected final class Prefix {
        /**
         * True if prefix in unknown, not mapped to any namespace
         */
        public boolean unknow;
        /**
         * Namespace prefix.
         */
        public String prefix;

        /**
         *
         * @param unknow if prefix is mapped to a namespace
         * @param prefix prefix text
         */
        public Prefix(final boolean unknow, final String prefix) {
            this.prefix = prefix;
            this.unknow = unknow;
        }
    }

    /**
     * Closes the output stream and releases any resources used by this XML writer.
     * This writer can not be used anymore after this method has been invoked.
     *
     * @throws IOException if an error occurred while closing the output stream.
     * @throws XMLStreamException if an error occurred while releasing XML writer resources.
     */
    @Override
    public void close() throws IOException, XMLStreamException {
        if (writer != null) {
            writer.close();
            writer = null;
        }
        if (targetStream != null) {
            targetStream.close();
            targetStream = null;
        }
    }
}
